<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-4</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>menuSelected = 1
menuType = 1
level = 0 
key_up = 0
key_down = 0
key_select = 0
iniload = ""
typetoamata = ""
typename = ""
typeautoaim = 0
menuText[0] = 5
menuText[1] = "PLAY GAME"
menuText[2] = "MODDING"
menuText[3] = "OPTIONS"
menuText[4] = "EXIT TO MAIN MENU"
menuText[5] = ""

menuTextModding[0] = 2
menuTextModding[1] = "LOAD INI EDITOR"
menuTextModding[2] = "BACK TO MENU"

menuTextOptions[0] = 5
menuTextOptions[1] = "CHANGE PLAYER NAME"
menuTextOptions[2] = "CHANGE TOA"
menuTextOptions[3] = "RESET SAVE DATA"
menuTextOptions[4] = "TOGGLE AUTOAIM (WILL TAKE EFFECT ON MAP RESTART)"
menuTextOptions[5] = "BACK TO MENU"

menuTextPlayGame[0] = 2
menuTextPlayGame[1] = "PLAY ON ARENA"
menuTextPlayGame[2] = "BACK TO MENU"
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(fnt_hud)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>key_up = keyboard_check_pressed(vk_up)
key_down = keyboard_check_pressed(vk_down)
key_select = keyboard_check_pressed(vk_enter)

if (key_up)
{
    sound_play(snd_switch_weapon);
    menuSelected -=1;
    if (menuSelected &lt; 1) { menuSelected = menuText[0]; }
}

if (key_down)
{
    sound_play(snd_switch_weapon);
    menuSelected +=1;
    if (menuSelected &gt; menuText[0]) { menuSelected = 1; }
    if (menuType == 1 &amp;&amp; menuSelected == 5) { menuSelected = 1; }
}

if (key_select)
{
    sound_play(snd_menu_select)
    if (menuType == 1)
    {
        switch(menuSelected) 
        {
            //wavedata
            case 1:
                menuType = 4
                menuSelected = 1
            break;
            case 2:
                menuType = 2
                menuSelected = 1
            break;
            case 3:
                menuType = 3
                menuSelected = 1
            break;
            case 4:
                if (show_question("Are you sure you want to exit to main menu?"))
                {
                    room_goto(rm_mainmenu)
                }
            break;
        }
    }
    else if (menuType == 2)
    {
        switch(menuSelected) 
        {
            //wavedata
            case 1:
                room_goto(rm_ini_editor)
            break;
            case 2:
                menuType = 1
                menuSelected = 1
            break;
        }
    }
    else if (menuType == 3)
    {
        switch(menuSelected) 
        {
            //wavedata
            case 1:
                ini_open("biorena_settings.ini")
                typename = get_string("Player Name",ini_read_string("settings_player","playername","Player"))
                ini_write_string("settings_player","playername",(string(typename)))
                ini_close()
                global.playername = typename
            break;
            case 2:
                ini_open("biorena_settings.ini")
                typetoamata = get_string("Toa Mata (Type in Toa name)",ini_read_string("settings_player","toamata","Tahu"))
                ini_write_string("settings_player","toamata",(string(typetoamata)))
                ini_close()
                global.toamata = typetoamata
            break;
            case 3:
                if (show_question("Are you sure you want to erase your save data? All progress will be lost, and all mods will be overwritten!"))
                {
                    scr_ini_create_wavedata()
                }
            break;
            case 4:
                ini_open("biorena_settings.ini")
                typeautoaim = get_string("Autoaim (0 = disable, 1 = enable)",string(ini_read_real("settings_controls","autoaim",1)))
                ini_write_string("settings_controls","autoaim",string(typeautoaim))
                ini_close()
                global.autoaim = typeautoaim
            break;
            case 5:
                menuType = 1
                menuSelected = 1
            break;
        }
    }
    else if (menuType == 4)
    {
        switch(menuSelected) 
        {
            //wavedata
            case 1:
                room_goto(rm_game)
            break;
            case 2:
                menuType = 1
                menuSelected = 1
            break;
        }
    }
}

if (keyboard_check(vk_backspace))
{
    io_clear()
    instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_left)
draw_set_font(fnt_tools)

if (menuType == 1)
{
    for (i = 1; i &lt;= menuText[0]; i+=1) 
    {
        if (menuSelected = i) { draw_set_color(c_red); } else { draw_set_color(c_black); }
        draw_text(x,y+(i*13)-13,menuText[i]);
    }
}
else if (menuType == 2)
{
    for (i = 1; i &lt;= menuTextModding[0]; i+=1) 
    {
        if (menuSelected = i) { draw_set_color(c_red); } else { draw_set_color(c_black); }
        draw_text(x,y+(i*13)-13,menuTextModding[i]);
    }
}
else if (menuType == 3)
{
    for (i = 1; i &lt;= menuTextOptions[0]; i+=1) 
    {
        if (menuSelected = i) { draw_set_color(c_red); } else { draw_set_color(c_black); }
        draw_text(x,y+(i*13)-13,menuTextOptions[i]);
    }
}
else if (menuType == 4)
{
    for (i = 1; i &lt;= menuTextPlayGame[0]; i+=1) 
    {
        if (menuSelected = i) { draw_set_color(c_red); } else { draw_set_color(c_black); }
        draw_text(x,y+(i*13)-13,menuTextPlayGame[i]);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
