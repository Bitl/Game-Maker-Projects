<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-4</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>menuSelected = 1
menuType = 1
level = 0 
key_up = 0
key_down = 0
key_select = 0
iniload = ""
typetoamata = ""
typename = ""
menuText[0] = 5
menuText[1] = "PLAY GAME"
menuText[2] = "MODDING"
menuText[3] = "OPTIONS"
menuText[4] = "HELP"
menuText[5] = "EXIT"

menuTextModding[0] = 4
menuTextModding[1] = "LOAD MAPPER"
menuTextModding[2] = "LOAD INI EDITOR"
menuTextModding[3] = "LOAD MOD"
menuTextModding[4] = "BACK TO MENU"

menuTextOptions[0] = 4
menuTextOptions[1] = "CHANGE PLAYER NAME"
menuTextOptions[2] = "CHANGE TOA"
menuTextOptions[3] = "RESET SAVE DATA"
menuTextOptions[4] = "BACK TO MENU"

menuTextPlayGame[0] = 3
menuTextPlayGame[1] = "PLAY ON ARENA"
menuTextPlayGame[2] = "LOAD CUSTOM MAP"
menuTextPlayGame[3] = "BACK TO MENU"

menuTextHelp[0] = 1
menuTextHelp[1] = "BACK TO MENU"

cursor=instance_create(mouse_x,mouse_y,obj_cursor_mapper)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(fnt_hud)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>key_up = keyboard_check_pressed(vk_up) || mouse_wheel_up()
key_down = keyboard_check_pressed(vk_down) || mouse_wheel_down()
key_select = keyboard_check_pressed(vk_enter) || mouse_check_button_pressed(mb_left)

if (key_up)
{
    sound_play(snd_switch_weapon);
    menuSelected -=1;
    if (menuSelected &lt; 1) { menuSelected = menuText[0]; }
}

if (key_down)
{
    sound_play(snd_switch_weapon);
    menuSelected +=1;
    if (menuSelected &gt; menuText[0]) { menuSelected = 1; }
}

if (key_select)
{
    sound_play(snd_menu_select)
    if (menuType == 1)
    {
        switch(menuSelected) 
        {
            //wavedata
            case 1:
                menuType = 4
                menuSelected = 1
            break;
            case 2:
                menuType = 2
                menuSelected = 1
            break;
            case 3:
                menuType = 3
                menuSelected = 1
            break;
            case 4:
                menuType = 5
                menuSelected = 1
                instance_create(0,0,obj_splash_menu)
            break;
            case 5:
                if (show_question("Are you sure you want to exit?"))
                {
                    game_end()
                }
            break;
        }
    }
    else if (menuType == 2)
    {
        switch(menuSelected) 
        {
            //wavedata
            case 1:
                room_goto(rm_mapper)
            break;
            case 2:
                room_goto(rm_ini_editor)
            break;
            case 3:
                iniload = get_string("Type in the name of the mod's INI file","Mod.ini")
                if file_exists(iniload)
                {
                    if string_count("biorena_settings",iniload) &amp;&amp; string_count(".ini",iniload) //iniload = "biorena_settings.ini"
                    {
                        show_message("ERROR 3: Invalid INI File.")
                    }
                    else if string_count("biorena_savedwavedata",iniload) &amp;&amp; string_count(".ini",iniload) //iniload = "biorena_savedwavedata.ini"
                    {
                        show_message("ERROR 4: Invalid INI File or the INI File is already loaded.")
                    }
                    else
                    {
                        file_copy(iniload,"biorena_savedwavedata.ini")
                    }
                
                    ini_open(iniload)
                    if iniload != "biorena_settings.ini"
                    {
                        if ini_section_exists("settings_player")
                        {
                            show_message("WARNING: INI File contains invalid section. The invalid section will be removed.")
                            ini_section_delete("settings_player")
                            show_message("Mod has been loaded with some errors")
                        }
                        else if !ini_section_exists("wavedata") || !ini_section_exists("wavemodding") || !ini_section_exists("wavedata") &amp;&amp; !ini_section_exists("wavemodding")
                        {
                            show_message("WARNING: INI File does not contain nesessary sections. They will be added with default values.")
                            scr_ini_viewer_inicreate(iniload)
                            file_copy(iniload,"biorena_savedwavedata.ini")
                            show_message("Mod has been loaded with some errors. Some changes may have been overwritten.")
                        }
                        else
                        {
                            show_message("Mod has been loaded")
                        }
                    }
                    ini_close()
                }
            break;
            case 4:
                menuType = 1
                menuSelected = 1
            break;
        }
    }
    else if (menuType == 3)
    {
        switch(menuSelected) 
        {
            //wavedata
            case 1:
                ini_open("biorena_settings.ini")
                typename = get_string("Player Name",ini_read_string("settings_player","playername","Player"))
                ini_write_string("settings_player","playername",(string(typename)))
                ini_close()
                global.playername = typename
            break;
            case 2:
                ini_open("biorena_settings.ini")
                typetoamata = get_string("Toa Mata (Type in Toa name)",ini_read_string("settings_player","toamata","Tahu"))
                ini_write_string("settings_player","toamata",(string(typetoamata)))
                ini_close()
                global.toamata = typetoamata
            break;
            case 3:
                if (show_question("Are you sure you want to erase your save data? All progress will be lost, and all mods will be overwritten!"))
                {
                    scr_ini_create_wavedata()
                }
            break;
            case 4:
                menuType = 1
                menuSelected = 1
            break;
        }
    }
    else if (menuType == 4)
    {
        switch(menuSelected) 
        {
            //wavedata
            case 1:
                room_goto(rm_game)
            break;
            case 2:
                level = get_open_filename('Game Map Files|*.gamemap','Map.gamemap')
                if(level)
                {
                    show_message("Map loaded. To play the map press 'Play Map' in the Mapper window.")
                    game_load(level)
                }
                else
                {
                    show_message("WARNING: No custom map loaded.")
                }
            break;
            case 3:
                menuType = 1
                menuSelected = 1
            break;
        }
    }
    else if (menuType == 5)
    {
        switch(menuSelected) 
        {
            case 1:
                if (instance_exists(obj_splash_menu))
                {
                    with (obj_splash_menu)
                    {
                        instance_destroy()
                    }
                }
                menuType = 1
                menuSelected = 1
            break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_left)
draw_set_font(fnt_tools)

if (menuType == 1)
{
    for (i = 1; i &lt;= menuText[0]; i+=1) 
    {
        if (menuSelected = i) { draw_set_color(c_red); } else { draw_set_color(c_black); }
        draw_text(x,y+(i*13)-13,menuText[i]);
    }
}
else if (menuType == 2)
{
    for (i = 1; i &lt;= menuTextModding[0]; i+=1) 
    {
        if (menuSelected = i) { draw_set_color(c_red); } else { draw_set_color(c_black); }
        draw_text(x,y+(i*13)-13,menuTextModding[i]);
    }
}
else if (menuType == 3)
{
    for (i = 1; i &lt;= menuTextOptions[0]; i+=1) 
    {
        if (menuSelected = i) { draw_set_color(c_red); } else { draw_set_color(c_black); }
        draw_text(x,y+(i*13)-13,menuTextOptions[i]);
    }
}
else if (menuType == 4)
{
    for (i = 1; i &lt;= menuTextPlayGame[0]; i+=1) 
    {
        if (menuSelected = i) { draw_set_color(c_red); } else { draw_set_color(c_black); }
        draw_text(x,y+(i*13)-13,menuTextPlayGame[i]);
    }
}
else if (menuType == 5)
{
    for (i = 1; i &lt;= menuTextHelp[0]; i+=1) 
    {
        if (menuSelected = i) { draw_set_color(c_red); } else { draw_set_color(c_black); }
        draw_text(x,y+(i*13)-13,menuTextHelp[i]);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
